version: '3.8'

services:
  # Base Infrastructure Layer
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - translation-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - translation-network

  # Database Services
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: example
      POSTGRES_DB: translation_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - translation-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - translation-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - translation-network

  # Core Services
  db-service:
    build: 
      context: ./db-service
      dockerfile: Dockerfile
    container_name: db-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://root:example@postgres:5432/translation_db
      NODE_ENV: production
    networks:
      - translation-network
    restart: unless-stopped

  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      - db-service
      - kafka
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgresql://root:example@postgres:5432/translation_db
      KAFKA_BROKERS: kafka:29092
      NODE_ENV: production
    networks:
      - translation-network
    restart: unless-stopped

  # Translation Services
  ar2en-service:
    build: 
      context: ./ar2en-service
      dockerfile: Dockerfile
    container_name: ar2en-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    networks:
      - translation-network
    restart: unless-stopped

  en2ar-service:
    build: 
      context: ./en2ar-service
      dockerfile: Dockerfile
    container_name: en2ar-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    networks:
      - translation-network
    restart: unless-stopped

  summary-service:
    build: 
      context: ./summary-service
      dockerfile: Dockerfile
    container_name: summary-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    networks:
      - translation-network
    restart: unless-stopped

  # API Gateway and Frontend
  gateway-service:
    build: 
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
      user-service:
        condition: service_started
    environment:
      NODE_ENV: production
      KAFKA_BROKERS: kafka:29092
      USER_SERVICE_URL: http://user-service:3001
    networks:
      - translation-network
    restart: unless-stopped

  frontend-service:
    build: 
      context: ./frontend-service
      dockerfile: Dockerfile
    container_name: frontend-service
    ports:
      - "80:80"
    depends_on:
      - gateway-service
    environment:
      NODE_ENV: production
      API_GATEWAY_URL: http://gateway-service:3000
      VITE_API_URL: http://localhost:3000
    networks:
      - translation-network
    restart: unless-stopped

  # Monitoring
  monitoring-service:
    build: 
      context: ./monitoring-service
      dockerfile: Dockerfile
    container_name: monitoring-service
    ports:
      - "9090:9090"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      NODE_ENV: production
      KAFKA_BROKERS: kafka:29092
      MONGODB_URI: mongodb://root:example@mongodb:27017
      METRICS_PORT: 9090
    networks:
      - translation-network
    restart: unless-stopped

networks:
  translation-network:
    driver: bridge

volumes:
  zookeeper_data:
  kafka_data:
  redis_data:
  mongodb_data:
  postgres_data: